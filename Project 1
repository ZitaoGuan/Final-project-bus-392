import matplotlib.pyplot as plt


# Define the function open_files to open the file
def open_files():
    #initalize lists
    #holds each line of data from txt file
    newlineHolder_list = []
    #holds each line of data from txt file
    lineHolder_list = []
    #holds every date from each line [string]
    date_list = []
    #holds every opening price from each line [string]
    open_list = []
    #holds every highest price from each line [float]
    high_list = []
    #holds every lowest price from each line [float]
    low_list = []
    #holds every closing price from each line [float]
    close_list = []
    #holds every volume from each line [float]
    volume_list = []
    
    #asks user which file they want to read from
    file_name = input("Enter the file name: ")
    #First Try to...
    try:
        #opens file as data file
        with open(file_name, "r") as data_file:
            #foreach loop, line represents each line of data from txt file
            for data in data_file:
                #Split the lines so that they are seperate lists
                line = data.splitlines()
                #foreach loop, so we can split the line into each indivdual data
                for str in line:
                    #in the strings, replace , with a space
                    x = str.replace(",", "\n", 5)
                    #In the strings of the list, replace the " with nothing
                    y = x.replace('"', '')
                    #append each data we splitted
                    lineHolder_list.append(y.splitlines())
            #removed the first line which is [Date,Open,High,Low,Close,Volume]
            #because these are all strings which cant be converted into a float
            lineHolder_list.pop(0)
            #foreach loop, store each data type into list and at the same time making it the desire data type we want
            for line in lineHolder_list:
                #Append the list of dates to line 0 (take out)
                date_list.append(line[0])
                #Append the opening prices list to line 1, and make them all floats (from strings)
                open_list.append(float(line[1]))
                #Append the high prices list to line 2, and make them all floats (from strings)
                high_list.append(float(line[2]))
                #Append the lowest prices list to line 3, and make them all floats (from strings)
                low_list.append(float(line[3]))
                #Append the closing prices list to line 4, and make them all floats (from strings)
                close_list.append(float(line[4]))
                #Append the volume amount list to line 5, and make them all floats (from strings)
                volume_list.append(float((line[5]).replace(",", "")))
            #start a for loop within the range of the length of the date list, starting from index 0
            for i in range(0, len(date_list)):
                #Append the date list at index i, append the open list at index i, append the high list at index i
                #append the close list at index i, append the volume list at index i
                #All of these are in a list format appended to newlineHolder list
                newlineHolder_list.append([date_list[i],open_list[i], high_list[i],low_list[i],close_list[i],volume_list[i]])
            #print the newlineHolder list
            return newlineHolder_list

    #If there is a FileNotFound error:
    except FileNotFoundError:
        #print error message
        print("File not found, please input the correct file")
        #quitting the program
        quit()
    #If anything else occurs (not in the try or other except)
    except:
        #print error message 
        print("File does not work or does not have permission")
        #quitting the program
        quit()

# a function that takes a list of list and find the highest closing price and the month it occur
def highest_closing(list_of_list):
    """Find the highest closing price from a list of list.

    Args:
        list_of_list: a list of list of the prices and dates

    Returns:
        a tuple of both the date and the highest closing price

    """
    #create variable to hold the highest closing price
    high_value = 0
    #create variable the day the highest closing price occur
    date = 0
    #initalize a for loop to look through the list of list
    for list_val in list_of_list:
        # if statement if the value located in the 4th index of the 
        # list is higher than the variable high_Value
        if list_val[4] > high_value:
            #set the high_value variable to the closing price in the list
            high_value = list_val[4]
            #set the date to the date varibale to the day the price occur
            date = list_val[0]
    #returns the date and high_value variables in a tuple
    return (date, high_value)

# a function that takes a list of list and find the lowest opening price and the month it occur
def lowest_opening(list_of_list):
    """Find the lowest opening price from a list of list.

    Args:
        list_of_list: a list of list of the prices and dates

    Returns:
        a tuple of both the date and the lowest opening price

    """
    #create variable to hold the lowest opening price
    low_value = None
    #create variable the day the lowest opening price occur
    date = 0
    #initalize a for loop to look through the list of list
    for list_val in list_of_list:
        #set an if statement to start the lowest number to be the first number
        if low_value == None:
            low_value = list_val[1]
            date = list_val[0]
        # elif statement if the value located in the zero index of the 
        # list is lower than the variable low_value
        elif list_val[1] < low_value:
            #set the low_value variable to the lowest opening in the list
            low_value = list_val[1]
            #set the date to the date varibale to the day the price occur
            date = list_val[0]
        
    #returns the date and low_value variables in a tuple
    return (date, low_value)

# a function that takes a list of list and find the ten highest closing price along with the month
def top_ten_highest_closing(list_of_list):
    """Find the ten highest prices from a list of list.

    Args:
        list_of_list: a list of list of the prices and dates

    Returns:
        a list of tuple that has the ten highest prices and the dates that it occur

    """
    #create an empty list
    top_ten = []
    #set a variable to a sorted of the list
    #The sorted function will create a new list 
    #that is sorted from highest value to the lowest value
    #the reverse=True allow me to create that
    #The key=lambda x:x [4] is a function that let me look through the
    #list of list and only picking the value in the zero index from that list
    #within the list
    sorted_list = sorted(list_of_list, reverse=True, key=lambda x:x[4])
    # initalize a for loop to only loop 10 times
    for index in range(10):
        # Append the sorted list by going through each of the 
        # list by using the [index] and it would go up 10 times.
        # It would then look at the zero index of that list and 
        # append it along with the zero index within that list
        #This would append those results into the top_ten list in the form of a tuple
        top_ten.append((sorted_list[index][0], sorted_list[index][4]))
    #return the list of tuple containing the top 10 highest closing price with their dates
    return top_ten

# a function that takes a list of list and find the ten lowest opening price along with the month
def top_ten_lowest_opening(list_of_list):
    """Find the ten highest prices from a list of list.

    Args:
        list_of_list: a list of list of the prices and dates

    Returns:
        a list of tuple that has the ten highest prices and the dates that it occur

    """
    #create an empty list
    low_ten = []
    #set a variable to a sorted of the list
    #The sorted function will create a new list 
    #that is sorted from lowes value to the highest value
    #The key=lambda x:x [1] is a function that let me look through the
    #list of list and only picking the value in the zero index from that list
    #within the list
    sorted_list = sorted(list_of_list, key=lambda x:x[1])
    # initalize a for loop to only loop 10 times
    for index in range(10):
        # Append the sorted list by going through each of the 
        # list by using the [index] and it would go up 10 times.
        # It would then look at the zero index of that list and 
        # append it along with the zero index within that list
        #This would append those results into the top_ten list in the form of a tuple
        low_ten.append((sorted_list[index][0],sorted_list[index][1]))
    #return the list of tuple containing the top 10 lowest opening price with their dates
    return low_ten

# a function that take a list of list and filter it so it have a list with the month/year
def filter_month(list_of_list):
    """Filter through the list of list to get a list of the months with the year.

    Args:
        list_of_list: a list of list of the prices and dates

    Returns:
        a list of months/years that doens't repeat

    """
    #create an empty list
    list_filter_month = []
    # start a for loop that goes through the list of list
    for list_val in list_of_list:
        # if statement if the list within the list in index 0 
        # from the string index 0 to 1 along with the string / and 
        # the list within the list in index 0 from the string index 6 to 9
        # combine together are in the list list_filter_month
        if (list_val[0][:2]+'/'+list_val[0][6:10])in list_filter_month:
            #The for loop would continue to the next list
            continue
        #append the list within the list in index 0 
        # from the string index 0 to 1 along with the string / and 
        # the list within the list in index 0 from the string index 6 to 9
        # combine together to the list list_filter_month
        list_filter_month.append(list_val[0][:2]+'/'+list_val[0][6:10])
    #return the list of months/years
    return list_filter_month

# a function to take in a list of prices within one month to find the average amount
def one_month_average(list_opening):
    """Take in a list of values and returns the average of them

    Args:
        list_opening: a list of prices within one month

    Returns:
        the average of the list of prices within one month

    """
    #returns the average of the list of prices within on month 
    # by getting the sum of the list and dividing it by the 
    # length of the list
    return sum(list_opening)/len(list_opening)

# a function to take a list of list and the months to find the average opening price per month
def average_month_opening(list_of_list, months):
    """Take a list of a list and the months to find the average opening prices for each months

    Args: 
        list_of_list: a list of a list of value from the csv file 
        months :a list of months as well as years
    
    Returns:
        a list of tuple of all the average for every months' opening price

    """
    # create an empty list
    list_average_opening = []
    # create a variable and set it to interger 0
    starting_point = 0
    #start a for loop going through the list of months given as a parameter
    for list_mon in months:
        #split the months/years of one of the strings that is 
        # within the list of months 
        # and set it to the variable month_year
        # month_year become a list with the month and the year
        month_year = list_mon.split('/')
        # create an empty list
        list_one_opening = []
        # start a for loop that goes in range with the starting_points
        # as where the loop will start and the length of the list of list
        # as the ending point of where the loop will stop
        for list_index in range(starting_point, len(list_of_list)):
            # go into the list of list and go through each of the list with []
            # and list_index as the index of which list.
            # go with the zero index within that list and split the string /
            # to create a list of the dates and set them to the variable date_list
            date_list = list_of_list[list_index][0].split('/')
            # if statement if the list_index added by 1 is equal
            # to the length of the list of the list
            # and it also have the zero index of the month_year is not equal
            # to the date_list zero index or the month_year first index
            # is not equal to the date_list 2nd index
            if list_index + 1 == len(list_of_list) and\
                month_year[0] != date_list[0] or month_year[1] != date_list[2]:
                #append the list_average_opening list with a tuple of the list_mon which
                # is a string of the month/year and a value that the function one_month_average
                # will return once it get the parameter list_one_opening which is a list of
                # the opening prices within that one month
                list_average_opening.append((list_mon, one_month_average(list_one_opening)))
                # set the starting_point variable to the list_index so it doesn't start the for loop
                # from the very beginning
                starting_point = list_index
                # break this for loop to get out of this loop
                break
            # An elif statement if the list_index added by 1 is equal 
            # to the length of the list of the list
            # and it also have the zero index of the month_year is equal
            # to the date_list zero index and the month_year first index 
            # is equal to the date_list 2nd index and the index of the 
            # list_mon from the list months + 1 is equal to the 
            # length of the months list.
            elif list_index + 1 == len(list_of_list) and\
                (month_year[0] == date_list[0] and\
                month_year[1] == date_list[2]) and\
                months.index(list_mon) + 1 == len(months):
                # append the value that is in the first index of the list 
                # of the index variable known as
                # list_index within the list of list to a list known as list_one_opening
                list_one_opening.append(list_of_list[list_index][1])
                #append the list_average_opening list with a tuple of the list_mon which
                # is a string of the month/year and a value that the function one_month_average
                # will return once it get the parameter list_one_opening which is a list of
                # the opening prices within that one month
                list_average_opening.append((list_mon, one_month_average(list_one_opening)))
            #an elif statement if the list_index added by 1 is equal 
            # to the length of the list of the list
            # and it also have the zero index of the month_year is equal
            # to the date_list zero index and the month_year first index 
            # is equal to the date_list 2nd index
            elif list_index + 1 == len(list_of_list) and\
                (month_year[0] == date_list[0] and\
                month_year[1] == date_list[2]):
                # set the list_one_opening to an empty list again
                list_one_opening = []
                # append value that is in the first index of the list 
                # of the index variable known as
                # list_index within the list of list to a list known as list_one_opening
                list_one_opening.append(list_of_list[list_index][1])
                #append the list_average_opening list with a tuple of the list_mon which
                # is a string of the month/year and a value that the function one_month_average
                # will return once it get the parameter list_one_opening which is a list of
                # the opening prices within that one month
                list_average_opening.append((list_mon, one_month_average(list_one_opening)))
            # an elif statement if it have the zero index of the month_year is equal
            # to the date_list zero index and the month_year first index 
            # is equal to the date_list 2nd index
            elif month_year[0] == date_list[0] and month_year[1] == date_list[2]:
                # append value that is in the first index of the list 
                # of the index variable known as
                # list_index within the list of list to a list known as list_one_opening
                list_one_opening.append(list_of_list[list_index][1])
            # an elif statement if it have the zero index of the month_year is not equal
            # to the date_list zero index or the month_year first index 
            # is not equal to the date_list 2nd index
            elif month_year[0] != date_list[0] or month_year[1] != date_list[2]:
                #append the list_average_opening list with a tuple of the list_mon which
                # is a string of the month/year and a value that the function one_month_average
                # will return once it get the parameter list_one_opening which is a list of
                # the opening prices within that one month
                list_average_opening.append(
                    (list_mon, one_month_average(list_one_opening))
                )
                # set the starting_point variable to the list_index so it doesn't start the for loop
                # from the very beginning
                starting_point = list_index
                # break this for loop to get out of the loop
                break
    # return the list of the tuple containing the months with average opening price for that month
    return list_average_opening

# a function to take a list of list and the months to find the average closing price per month
def average_month_closing(list_of_list, months):
    """Take a list of a list and the months to find the average closing prices for each months

    Args: 
        list_of_list: a list of a list of value from the csv file 
        months :a list of months as well as years
    
    Returns:
        a list of tuple of all the average for every months' closing price

    """
    # create an empty list
    list_average_closing = []
    #set a variable to a sorted of the list
    starting_point = 0
    #start a for loop going through the list of months given as a parameter
    for list_mon in months:
        #split the months/years of one of the strings that is 
        # within the list of months 
        # and set it to the variable month_year
        # month_year become a list with the month and the year
        month_year = list_mon.split('/')
        # create an empty list
        list_one_closing = []
        # start a for loop that goes in range with the starting_points
        # as where the loop will start and the length of the list of list
        # as the ending point of where the loop will stop
        for list_index in range(starting_point, len(list_of_list)):
            # go into the list of list and go through each of the list with []
            # and list_index as the index of which list.
            # go with the zero index within that list and split the string /
            # to create a list of the dates and set them to the variable date_list
            date_list = list_of_list[list_index][0].split('/')
            # if statement if the list_index added by 1 is equal 
            # to the length of the list of the list
            # and it also have the zero index of the month_year is not equal
            # to the date_list zero index or the month_year first index 
            # is not equal to the date_list 2nd index
            if list_index + 1 == len(list_of_list) and\
                month_year[0] != date_list[0] or month_year[1] != date_list[2]:
                #append the list_average_closing list with a tuple of the list_mon which
                # is a string of the month/year and a value that the function one_month_average
                # will return once it get the parameter list_one_closing which is a list of
                # the closing prices within that one month
                list_average_closing.append((list_mon, one_month_average(list_one_closing)))
                # set the starting_point variable to the list_index so it doesn't start the for loop
                # from the very beginning
                starting_point = list_index
                # break this for loop to get out of this loop
                break
            # An elif statement if the list_index added by 1 is equal 
            # to the length of the list of the list
            # and it also have the zero index of the month_year is equal
            # to the date_list zero index and the month_year first index 
            # is equal to the date_list 2nd index and the index of the 
            # list_mon from the list months + 1 is equal to the 
            # length of the months list.
            elif list_index + 1 == len(list_of_list) and\
                (month_year[0] == date_list[0] and\
                month_year[1] == date_list[2]) and\
                months.index(list_mon) + 1 == len(months):
                # append the value that is in the 4th index of the list 
                # of the index variable known as
                # list_index within the list of list to a list known as list_one_closing
                list_one_closing.append(list_of_list[list_index][4])
                #append the list_average_closing list with a tuple of the list_mon which
                # is a string of the month/year and a value that the function one_month_average
                # will return once it get the parameter list_one_closing which is a list of
                # the closing prices within that one month
                list_average_closing.append((list_mon, one_month_average(list_one_closing)))
            #an elif statement if the list_index added by 1 is equal 
            # to the length of the list of the list
            # and it also have the zero index of the month_year is equal
            # to the date_list zero index and the month_year first index 
            # is equal to the date_list 2nd index
            elif list_index + 1 == len(list_of_list) and\
                (month_year[0] == date_list[0] and\
                month_year[1] == date_list[2]):
                # set the list_one_closing to an empty list again
                list_one_closing = []
                # append value that is in the 4th index of the list 
                # of the index variable known as
                # list_index within the list of list to a list known as list_one_closing
                list_one_closing.append(list_of_list[list_index][4])
                #append the list_average_closing list with a tuple of the list_mon which
                # is a string of the month/year and a value that the function one_month_average
                # will return once it get the parameter list_one_closing which is a list of
                # the closing prices within that one month
                list_average_closing.append((list_mon, one_month_average(list_one_closing)))
            # an elif statement if it have the zero index of the month_year is equal
            # to the date_list zero index and the month_year first index 
            # is equal to the date_list 2nd index
            elif month_year[0] == date_list[0] and month_year[1] == date_list[2]:
                # append value that is in the 4th index of the list 
                # of the index variable known as
                # list_index within the list of list to a list known as list_one_closing
                list_one_closing.append(list_of_list[list_index][4])
            # an elif statement if it have the zero index of the month_year is not equal
            # to the date_list zero index or the month_year first index 
            # is not equal to the date_list 2nd index
            elif month_year[0] != date_list[0] or month_year[1] != date_list[2]:
                #append the list_average_closing list with a tuple of the list_mon which
                # is a string of the month/year and a value that the function one_month_average
                # will return once it get the parameter list_one_closing which is a list of
                # the closing prices within that one month
                list_average_closing.append(
                    (list_mon, one_month_average(list_one_closing))
                )
                # set the starting_point variable to the list_index so it doesn't start the for loop
                # from the very beginning
                starting_point = list_index
                # break this for loop to get out of this loop
                break
    # return the list of the tuple containing the months with average closing price for that month
    return list_average_closing

# a function that take a list of tuple and find the date within them
def convert_tuple_date(list_tuple):
    """Take a list of tuple and return a list of dates from the tuple

    Args:
        list_tuple: A list of tuple containing months and prices
    
    Return:
        a list of dates

    """
    # create an empty list
    list_date = []
    # start a for loop that look through the list of tuple
    for val_tuple in list_tuple:
        # append the zero index of the tuple to the list_date
        list_date.append(val_tuple[0])
    # return the list containing the dates
    return list_date

# a function that take a list of tuple and find the average price within them
def convert_tuple_avg(list_tuple):
    """Take a list of tuple and return a list of average price from the tuple

    Args:
        list_tuple: A list of tuple containing months and prices

    Return:
        a list of average price

    """
    # create an empty list
    list_avg = []
    # start a for loop that look through the list of tuple
    for val_tuple in list_tuple:
        # append the zero index of the tuple to the list_avg
        list_avg.append(val_tuple[1])
    # return the list containing the average price
    return list_avg

#This function will take in a value and turn it into a str with commas divided between them
# first it will turn it into a float and then go through a series of if statements
# This will allow the function to determine how much it is worth and make the float into a string
# This will allow the function to slice it and place the commas in between
# THis will return the functions into the value
def convert_to_str(value):
    """Takes a value and convert it into a string with commas

    Args:
        value: a value of str, int, or float

    Return:
        a value that is a string with commas divide if the value is too big

    """
    #establishing the variable f_value equal to the value as a float
    f_value = (float(value))
     #if the f_value variable is greater or equal to 1000, but less than 10000
    if f_value >= 1000 and f_value < 10000:
        #set the var s_string to f_value as a string
        s_value = str(f_value)
        #return the var s_value and make it so that there is a comma after the first number
        return s_value[0] + ',' + s_value[1:]
    #if the f_value variable is greater or equal to 10000, but less than 100000
    elif f_value >= 10000 and f_value < 100000:
        #set the s_value to f_value as a string
        s_value = str(f_value)
        #return the var s_value and make it so that a comma is inserted after the first 2 numbers
        return s_value[:2] + ',' + s_value[2:]
    #if the f_value variable is greater or equal to 100000, but less than 1000000
    elif f_value >= 100000 and f_value < 1000000:
        #set the s_valu to f_value as a string
        s_value = str(f_value)
        #return the s_value and make it so that a comma is insertd after the first 3 numbers
        return s_value[:3] + ',' + s_value[3:]
    #if the f_value variable is greater or equal to 1000000, but less than 10000
    elif f_value >= 1000000 and f_value < 10000000:
        #set the var s_value to f_value as a string
        s_value = str(f_value)
        #return the s_value and make it so that a comma is inserted after the first number, and every 3 numbers
        return s_value[0] + ',' + s_value[1:4] + ',' + s_value[4:]
    #if else (none of the above)
    else:
        #return f_value as a string
        return str(f_value)
    



# A function that takes a list of tuple and convert the prices into strings with commas
# This function uses a for loop to look through the list of tuple
# This then use the function converty_to_str on the 1st index of each tuple and change them into
# string with commas
def convert_list_str(list_val):
    """Takes a list and convert the values inside into a string with commas

    Args:
        list_val: a list of str, int, or float

    Return:
        a list of value that is a string with commas divide if the value is too big

    """
    #create a new list 
    list_new_val = []
    # for the values in the list
    for val in list_val:
        #set the var convert_str equal to the value of the 2 item in the list
        convert_str = convert_to_str(val[1])
        #Append the new list to the 1st item in the lsit and the convert str
        list_new_val.append((val[0], convert_str))
    #return the new list
    return list_new_val


#Define the opening graph function
def opening_graph(list_dates, list_opening_avg):
    """ Takes a list of dates and a list of opening prices to graph.  
        Then it graphs the lists as dates as the x axis and opening price avg as the y axis

        args:
            plt.plot: Plotting the lists
            plt.title: Pringitng the title of the graph
            plt.xlabel: label of the x axis
            plt.ylabel: label of the y axis
            plt. savefig: saving the figure under a png file
            plt.show(): showing the graph

        return:
            the lists representing the x and y axis
    """
    #setting the graphs figure # to 1
    plt.figure(figsize=(20,5))
    #Takes in a list of dates and list of opening prices to put on the graph
    plt.plot(list_dates, list_opening_avg)
    #Setting the title of the graph
    plt.title('Average Opening Prices For Each Month ')
    #Setting the x label to Dates
    plt.xlabel('Dates')
    #Setting the y axis label to Average opening price
    plt.ylabel('Average Opening Price')
    #Saving the figure as a png
    plt.savefig('BUS-392-Opening-test.png')
    #Showing the graph
    plt.show()

#Define the closing graph function
def closing_graph(list_dates, list_closing_avg):
    """Takes a graph of dates and closing average prices 
        Then it graphs the lists as dates as the x axis and closing price avg as the y axis

        args:
            list_dates: list of dates
            list_closing_avg: list of closing average prices

        return:
            a graph of the list dates and the closing average prices

    """
    #setting the graphs figure # to 2
    plt.figure(figsize=(20,5))
    #Take in a list of dates and a list of closing prices to put on the graph
    plt.plot(list_dates, list_closing_avg)
    #Setting the title of the graph 
    plt.title('Average Closing Prices For Each Month ')
    #Setting the x axis label to Dates
    plt.xlabel('Dates')
    #Setting the y axis label to Average Closing Price
    plt.ylabel('Average Closing Price')
    #Saving the figure as a png
    plt.savefig('BUS-392-Closing-test.png')
    #Showing the graph
    plt.show()


#Defining the highest closing price function
def show_highest_closing_price(tuple_highest_closing):
    """create a collumn of the date(s) and the highest closing price

        args:
            tuple_highest_closing: tuple of the highest closing price and date
        
        return:
            collumn of highest closing price and the corresponding date
    """
    #Setting Date to the first slot in the tuple
    date = tuple_highest_closing[0]
    #Setting the value to the second slot in the tuple
    highest_value = tuple_highest_closing[1]
    #Printing the Header for the collumns (Date and the correlating Highest Closing Price)
    print("Date            |Highest closing price")
    #Printing a divider
    print('------------------------------------------')
    #Creating the %s is a placeholder for string which is the date and highest value closing price
    print("%8s      |$%s" % (date, highest_value))
    #Printing a seperating gap 
    print()


#Defining the lowest opening price function
def show_lowest_opening_price(tuple_lowest_opening):
    """finding and displaying the lowest opening price and the corresponding date 
    
        args: 
            tuple_lowest_opening: a tuple that contains the lowest opening price and the corresponding date
        
        return:
            a collumn that displays the lowest opening price and the corresponding date along with labels and seperators
    """
    #Setting Date to the first slot in the tuple
    date = tuple_lowest_opening[0]
    #Setting the value to the second slot in the tuple
    lowest_value = tuple_lowest_opening[1]
    #Printing the header for the collumns (Date and the correlating Lowest opening price)
    print("Date            |Lowest opening price")
    #Printing a divider
    print('------------------------------------------')
    #Creating the place where the values will appear. 
    #The %s is a placeholder for the strings date and lowest opening price
    print("%8s      |$%s" % (date, lowest_value))
    #Printing a seperate gap
    print()


#Defining the 10 highest closing prices function
def ten_highest_closing_prices(tuple_10_highest_closing):
    """Finding and displaying the 10 highest closing prices and corresponding dates

        args: 
            tuple_10_lowest_opening: a tuple containing the highest closing prices and the corresponding dates
        
        return:
            A collumn that shows the highest closing prices in the csv file and the corresponding dates along with labels for dates and prices
    """
    #Printing the header for the collumns (Date and the correlating 10 highest closing prices)
    print("Date            |10 highest closing prices")
    #Printing a divider
    print('------------------------------------------')
    ##Start a for loop that goes through the 10 highest closing price list of tuples
    for val_tuple in tuple_10_highest_closing:
        #Setting date to the first slot in the tuple
        date = val_tuple[0]
        #Setting the value to the second slot in the tuple
        highest_val = val_tuple[1]
        #Creating the places where the values and corresponding dates will appear
        #The %s is a placeholder for the strings date and the corresponding highest closing prices
        print("%8s      |$%s" % (date, highest_val))
    #Printing a blank line
    print()


#Defining the 10 lowest opening prices function
def ten_lowest_opening_prices(tuple_10_lowest_opening):
    """Finding and displaying the 10 lowest opening prices and corresponding dates

        args: 
            tuple_10_lowest_opening: a tuple containing the lowest opening prices and the corresponding dates
        
        return:
            A collumn that shows the lowest opening price in the csv file and the corresponding dates along with labels for dates and prices
    """
    #Printing the header for the collumn (Date and the corresponding 10 lowest opening prices)
    print("Date            |10 lowest opening prices")
    #Printing a divider
    print('------------------------------------------')
    #Start a for loop that goes through the 10 lowest opening price list of tuples
    for val_tuple in tuple_10_lowest_opening:
        #Setting the date to the first slot in the tuple
        date = val_tuple[0]
        #Setting the value to the second slot in the tuple
        lowest_val = val_tuple[1]
        #Creating the places where the values and corresponding dates will appear
        #The %s is a placeholder for the strings date and the corresponding lowest opening prices
        print("%8s      |$%s" % (date, lowest_val))
    #printing a blank line
    print()

#look at the function which should be yellow
def main(): #anything with new mean it's for displaying reason note for tyler (delete this after reading)
    """Calls in all the functions to execute them

        args: 

        return:
            shows all the results of the other functions in the program
    """
    #assigning variable list of list to the result of the open files function
    list_of_list = open_files()
    #assigning the variable highest closing price to the result of highest closing function by giving the parameter list_of_lists
    highest_closing_price = highest_closing(list_of_list)
    #assigning the var with a tuple that is the 0th index for the highest closing price tuple and the result of the convert to str function
    new_highest_closing = (highest_closing_price[0], convert_to_str(highest_closing_price[1]))
    #assigning the var lowest opening price to the result of lowest opening function by giving the parameter list_of_lists
    lowest_opening_price = lowest_opening(list_of_list)
    #assigning the var with a tuple that is the 0th index for the lowest price openings tuple and the result of the convert to str function
    new_lowest_opening = (lowest_opening_price[0], convert_to_str(lowest_opening_price[1]))
    #assigning the var top ten high to the result of the top ten highest function giving the parameter list_of_lists
    top_ten_high = top_ten_highest_closing(list_of_list)
    #assigning the var new ten high to the result of the function convert_list_str function using the paramter top_ten_high
    new_ten_high = convert_list_str(top_ten_high)
    #assigning the var of the top ten low to the result of the function top ten lowest opening using the parameter list_of_lists
    top_ten_low = top_ten_lowest_opening(list_of_list)
    #assigning the var new_ten_low to the result of the convert_list_str function using the paramter top_ten_low
    new_ten_low = convert_list_str(top_ten_low)
    #assigning the var list_month to the result of the filter_month using the paramter list_of_lists
    list_month = filter_month(list_of_list)
    #assigning the avg_month_open var to the result of the average_month_opening function using the parameters list_of_lists and list_month
    avg_month_open = average_month_opening(list_of_list, list_month)
    #assigning the var avg_month_close to the result of the average_month_closing function using the parameters list_of_lists and list_month
    avg_month_close = average_month_closing(list_of_list, list_month)
    #assinging the var list_date_open to the result of the convert_tuple_date function using the parameter avg_month_open
    list_date_open = convert_tuple_date(avg_month_open)
    #assigning the var list_date_close to the result of the convert_tuple_date function using the parameter avg_month_close
    list_date_close = convert_tuple_date(avg_month_close)
    #assigning the var list_avg_open to the result of the convert_tuple_avg function using the parameter avg_month_open
    list_avg_open = convert_tuple_avg(avg_month_open)
    #assigning the var list_avg_close to the result of the convert_tuple_avg function using the parameter avg_month_close
    list_avg_close = convert_tuple_avg(avg_month_close)
    #call show_highest_closing_price by giving the parameter new_highest_closing
    show_highest_closing_price(new_highest_closing)
    #call show_lowest_opening_price by giving the parameter new_lowest_opening
    show_lowest_opening_price(new_lowest_opening)
    #call ten_highest_closing_prices by giving the parameter new_ten_high
    ten_highest_closing_prices(new_ten_high)
    #call the ten_lowest_opening_prices by giving the parameter new_ten_low
    ten_lowest_opening_prices(new_ten_low)
    #call the opening_graph function by giving the parameters list_date_open and list_avg_open
    opening_graph(list_date_open, list_avg_open)
    #call the closing graph by giving the parameters list_date_close and list_avg_close
    closing_graph(list_date_close, list_avg_close)

#call main function 
main()
