from re import S
import matplotlib as ply
import matplotlib.pyplot as plt
from datetime import datetime

# Define the function open_files to open the file
def open_files():
    #initalize lists
    #holds each line of data from txt file
    newlineHolder_list = []
    #holds each line of data from txt file
    lineHolder_list = []
    #holds every date from each line [string]
    date_list = []
    #holds every opening price from each line [string]
    open_list = []
    #holds every highest price from each line [float]
    high_list = []
    #holds every lowest price from each line [float]
    low_list = []
    #holds every closing price from each line [float]
    close_list = []
    #holds every volume from each line [float]
    volume_list = []
    
    #asks user which file they want to read from
    file_name = input("Enter the file name: ")
    #First Try to...
    try:
        #opens file as data file
        with open(file_name, "r") as data_file:
            #foreach loop, line represents each line of data from txt file
            for data in data_file:
                #Split the lines so that they are seperate lists
                line = data.splitlines()
                #foreach loop, so we can split the line into each indivdual data
                for str in line:
                    #in the strings, replace , with a space
                    x = str.replace(",", "\n", 5)
                    #In the strings of the list, replace the " with nothing
                    y = x.replace('"', '')
                    #append each data we splitted
                    lineHolder_list.append(y.splitlines())
            #removed the first line which is [Date,Open,High,Low,Close,Volume]
            #because these are all strings which cant be converted into a float
            lineHolder_list.pop(0)
            #foreach loop, store each data type into list and at the same time making it the desire data type we want
            for line in lineHolder_list:
                #Append the list of dates to line 0 (take out)
                date_list.append(line[0])
                #Append the opening prices list to line 1, and make them all floats (from strings)
                open_list.append(float(line[1]))
                #Append the high prices list to line 2, and make them all floats (from strings)
                high_list.append(float(line[2]))
                #Append the lowest prices list to line 3, and make them all floats (from strings)
                low_list.append(float(line[3]))
                #Append the closing prices list to line 4, and make them all floats (from strings)
                close_list.append(float(line[4]))
                #Append the volume amount list to line 5, and make them all floats (from strings)
                volume_list.append(float((line[5]).replace(",", "")))
            #start a for loop within the range of the length of the date list, starting from index 0
            for i in range(0, len(date_list)):
                #Append the date list at index i, append the open list at index i, append the high list at index i
                #append the close list at index i, append the volume list at index i
                #All of these are in a list format appended to newlineHolder list
                newlineHolder_list.append([date_list[i],open_list[i], high_list[i],low_list[i],close_list[i],volume_list[i]])
            #print the newlineHolder list
            print(newlineHolder_list)

    #If there is a FileNotFound error:
    except FileNotFoundError:
        #print error message
        print("File not found, please input the correct file")
        #quitting the program
        quit()
    #If anything else occurs (not in the try or other except)
    except:
        #print error message 
        print("File does not work or does not have permission")
        #quitting the program
        quit()


def highest_closing(list_of_list):
    """Find the highest closing price from a list of list.

    Args:
        list_of_list: a list of list of the prices and dates

    Returns:
        a tuple of both the date and the highest closing price

    """
    #create variable to hold the highest closing price
    high_value = 0
    #create variable the day the highest closing price occur
    date = 0
    #initalize a for loop to look through the list of list
    for list_val in list_of_list:
        # if the value located in the 4th index of the 
        # list is higher than the variable high_Value
        if list_val[4] > high_value:
            #set the high_value variable to the closing price in the list
            high_value = list_val[4]
            #set the date to the date varibale to the day the price occur
            date = list_val[0]
    #returns the date and high_value variables in a tuple
    return (date, high_value)


def lowest_opening(list_of_list):
    """Find the lowest opening price from a list of list.

    Args:
        list_of_list: a list of list of the prices and dates

    Returns:
        a tuple of both the date and the lowest opening price

    """
    #create variable to hold the lowest opening price
    low_value = 0
    #create variable the day the lowest opening price occur
    date = 0
    #initalize a for loop to look through the list of list
    for list_val in list_of_list:
        # if the value located in the 1th index of the 
        # list is lower than the variable low_value
        if list_val[1] < low_value:
            #set the low_value variable to the lowest opening in the list
            low_value = list_val[1]
            #set the date to the date varibale to the day the price occur
            date = list_val[0]
    #returns the date and low_value variables in a tuple
    return (date, low_value)


def top_ten_highest_closing(list_of_list):
    """Find the ten highest prices from a list of list.

    Args:
        list_of_list: a list of list of the prices and dates

    Returns:
        a list of tuple that has the ten highest prices and the dates that it occur

    """
    #create an empty list
    top_ten = []
    #set a variable to a sorted of the list
    #The sorted function will create a new list 
    #that is sorted from highest value to the lowest value
    #the reverse=True allow me to create that
    #The key=lambda x:x [4] is a function that let me look through the
    #list of list and only picking the value in the 4th index from that list
    #within the list
    sorted_list = sorted(list_of_list, reverse=True, key=lambda x:x[4])
    # initalize a for loop to only loop 10 times
    for index in range(10):
        # Append the sorted list by going through each of the 
        # list only up to the tenth one 
        top_ten.append((sorted_list[index][0], sorted_list[index][4]))
    return top_ten


def top_ten_lowest_opening(list_of_list):
    low_ten = []
    sorted_list = sorted(list_of_list, key=lambda x:x[1])
    for index in range(10):
        low_ten.append((sorted_list[index][0],sorted_list[index][1]))
    return low_ten


def filter_month(list_of_list):
    list_filter_month = []
    for list_val in list_of_list:
        if (list_val[0][:2]+'/'+list_val[0][6:10])in list_filter_month:
            continue
        list_filter_month.append(list_val[0][:2]+'/'+list_val[0][6:10])
    return list_filter_month


def one_month_average(list_opening):
    return sum(list_opening)/len(list_opening)


def average_month_opening(list_of_list, months):
    """
    Parameter: 
        list_of_list: a list of a list of value from the csv file 
        months :a list of months as well as years
    returns:
        a list of tuple of all the average for every months' opening price
    """
    list_average_opening = []
    starting_point = 0
    for list_mon in months:
        month_year = list_mon.split('/')
        list_one_opening = []
        for list_index in range(starting_point, len(list_of_list)):
            date_list = list_of_list[list_index][0].split('/')
            if list_index + 1 == len(list_of_list) and\
                month_year[0] != date_list[0] or month_year[1] != date_list[2]:
                list_average_opening.append((list_mon, one_month_average(list_one_opening)))
                starting_point = list_index
                break
            elif list_index + 1 == len(list_of_list) and\
                (month_year[0] == date_list[0] and\
                month_year[1] == date_list[2]) and\
                months.index(list_mon) + 1 == len(months):
                list_one_opening.append(list_of_list[list_index][1])
                list_average_opening.append((list_mon, one_month_average(list_one_opening)))
            elif list_index + 1 == len(list_of_list) and\
                (month_year[0] == date_list[0] and\
                month_year[1] == date_list[2]):
                list_one_opening = []
                list_one_opening.append(list_of_list[list_index][1])
                list_average_opening.append((list_mon, one_month_average(list_one_opening)))
            elif month_year[0] == date_list[0] and month_year[1] == date_list[2]:
                list_one_opening.append(list_of_list[list_index][1])
            elif month_year[0] != date_list[0] or month_year[1] != date_list[2]:
                list_average_opening.append(
                    (list_mon, one_month_average(list_one_opening))
                )
                starting_point = list_index
                break
    return list_average_opening


def average_month_closing(list_of_list, months):
    """
    Parameter: 
        list_of_list: a list of a list of value from the csv file 
        months :a list of months as well as years
    returns:
        a list of tuple of all the average for every months' closing price
    """
    list_average_closing = []
    starting_point = 0
    for list_mon in months:
        month_year = list_mon.split('/')
        list_one_closing = []
        for list_index in range(starting_point, len(list_of_list)):
            date_list = list_of_list[list_index][0].split('/')
            if list_index + 1 == len(list_of_list) and\
                month_year[0] != date_list[0] or month_year[1] != date_list[2]:
                list_average_closing.append((list_mon, one_month_average(list_one_closing)))
                starting_point = list_index
                break
            elif list_index + 1 == len(list_of_list) and\
                (month_year[0] == date_list[0] and\
                month_year[1] == date_list[2]) and\
                months.index(list_mon) + 1 == len(months):
                list_one_closing.append(list_of_list[list_index][4])
                list_average_closing.append((list_mon, one_month_average(list_one_closing)))
            elif list_index + 1 == len(list_of_list) and\
                (month_year[0] == date_list[0] and\
                month_year[1] == date_list[2]):
                list_one_closing = []
                list_one_closing.append(list_of_list[list_index][4])
                list_average_closing.append((list_mon, one_month_average(list_one_closing)))
            elif month_year[0] == date_list[0] and month_year[1] == date_list[2]:
                list_one_closing.append(list_of_list[list_index][4])
            elif month_year[0] != date_list[0] or month_year[1] != date_list[2]:
                list_average_closing.append(
                    (list_mon, one_month_average(list_one_closing))
                )
                starting_point = list_index
                break
    return list_average_closing


def convert_tuple_date(list_tuple):
    list_date = []
    for val_tuple in list_tuple:
        list_date.append(val_tuple[0])
    return list_date


def convert_tuple_avg(list_tuple):
    list_avg = []
    for val_tuple in list_tuple:
        list_avg.append(val_tuple[1])
    return list_avg


#Define the opening graph function
def opening_graph(list_dates, list_opening_avg):
    #Creating figure 1 
    plt.figure(1)
    #Takes in a list of dates and list of opening prices to put on the graph
    plt.plot(list_dates, list_opening_avg)
    #Setting the title of the graph
    plt.title('Average Opening Prices For Each Month ')
    #Setting the x label to Dates
    plt.xlabel('Dates')
    #Setting the y axis label to Average opening price
    plt.ylabel('Average Opening Price')
    #Saving the figure as a png
    plt.savefig('BUS-392-Opening-test.png')
    #Showing the graph
    plt.show()

#Define the closing graph function
def closing_graph(list_dates, list_closing_avg):
    #Creating figure 2
    plt.figure(2)
    #Take in a list of dates and a list of closing prices to put on the graph
    plt.plot(list_dates, list_closing_avg)
    #Setting the title of the graph 
    plt.title('Average Closing Prices For Each Month ')
    #Setting the x axis label to Dates
    plt.xlabel('Dates')
    #Setting the y axis label to Average Closing Price
    plt.ylabel('Average Closing Price')
    #Saving the figure as a png
    plt.savefig('BUS-392-Closing-test.png')
    #Showing the graph
    plt.show()

# def two_graphs():
#     opening_graph(dates, values)
#     plt.savefig('BUS-392-Opening-test.png')
#     closing_graph(dates, values2)
#     plt.savefig('BUS-392-Closing-test.png')
#     plt.show()

#open_files()

dates = ['07/3232', '12/3232', '01/3232', '02/3232', '03/3232']
values = [1.75, 6.0, 1.0, 1.0, 3.0]
values2 = [1.82, 7.0, 5.0, 2.0, 2.0]
# open_price_graph(dates, values)
# closing_price_graph(dates, values)
# two_graphs()

#Defining the highest closing price function
def show_highest_closing_price(tuple_highest_closing):
    #Setting Date to the first slot in the tuple
    date = tuple_highest_closing[0]
    #Setting the value to the second slot in the tuple
    highest_value = tuple_highest_closing[1]
    #Printing the Header for the collumns (Date and the correlating Highest Closing Price)
    print("Date            |Highest closing price")
    #Printing a divider
    print('---------------------------------')
    #Creating the %s is a placeholder for string which is the date and highest value closing price
    print("%8s      |$%.2s" % (date, highest_value))
    #Printing a seperating gap 
    print()

shcp_tuple = ("05/21/2021", 420.69)
show_highest_closing_price(shcp_tuple)

#Defining the lowest opening price function
def show_lowest_opening_price(tuple_lowest_opening):
    #Setting Date to the first slot in the tuple
    date = tuple_lowest_opening[0]
    #Setting the value to the second slot in the tuple
    lowest_value = tuple_lowest_opening[1]
    #Printing the header for the collumns (Date and the correlating Lowest opening price)
    print("Date            |Lowest opening price")
    #Printing a divider
    print('---------------------------------')
    #Creating the place where the values will appear. 
    #The %s is a placeholder for the strings date and lowest opening price
    print("%8s      |$%.2s" % (date, lowest_value))
    #Printing a seperate gap
    print()

slop_tuple = ("03/24/2022", 30.2)
show_lowest_opening_price(slop_tuple)

#Defining the 10 highest closing prices function
def ten_highest_closing_prices(tuple_10_highest_closing):
    #Printing the header for the collumns (Date and the correlating 10 highest closing prices)
    print("Date            |10 highest closing prices")
    #Printing a divider
    print('---------------------------------')
    ##Start a for loop that goes through the 10 highest closing price list of tuples
    for val_tuple in tuple_10_highest_closing:
        #Setting date to the first slot in the tuple
        date = val_tuple[0]
        #Setting the value to the second slot in the tuple
        highest_val = val_tuple[1]
        #Creating the places where the values and corresponding dates will appear
        #The %s is a placeholder for the strings date and the corresponding highest closing prices
        print("%8s        |$%s" % (date, highest_val))

ten_hc_tuple = ("03/13/2021", 62183.1)
ten_highest_closing_prices(ten_hc_tuple)

#Defining the 10 lowest opening prices function
def ten_lowest_opening_prices(tuple_10_lowest_opening):
    #Printing the header for the collumn (Date and the corresponding 10 lowest opening prices)
    print("Date            |10 highest closing prices")
    #Printing a divider
    print('---------------------------------')
    #Start a for loop that goes through the 10 lowest opening price list of tuples
    for val_tuple in tuple_10_lowest_opening:
        #Setting the date to the first slot in the tuple
        date = val_tuple[0]
        #Setting the value to the second slot in the tuple
        lowest_val = val_tuple[1]
        #Creating the places where the values and corresponding dates will appear
        #The %s is a placeholder for the strings date and the corresponding lowest opening prices
        print("%8s        |$%s" % (date, lowest_val))
        
        
opening_graph(dates, values)
closing_graph(dates, values)



